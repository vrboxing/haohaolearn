#+TITLE: Pro Git
* Getting Started

* 2. Git基础

** 2.1 获得一个仓库
   - 在既有目录下初始化仓库
     + git init
   - 克隆既有仓库
     + git clone https://github.com/libgit2/libgit2

** 2.2 记录仓库变化
   - 文件状态：追踪、未追踪
   - 追踪文件：未修改、修改、暂存
   - 检查文件状态
     + git clone
   - 跟踪新文件/暂存文件/标明合并冲突已被解决 
     + git add [files]

** 2.3 查看提交历史
   - git log：不用参数时，按提交时间列出所有的更新，最近的更新排在最上面。
     列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及
     提交说明。
   - git log -p -2: 显示每次的提交差异，显示最近2次提交。
   - git log --stat: 显示提交的统计信息。
   - git log --pretty=[子选项]: 按特定格式显示提交历史。
     + oneline: 每个提交在一行内显示
     + short, full, fuller: 展示不同程度的信息
     + format:"...": 自定义格式
   - git log --graph: 用ASCII字符串展示分支、合并历史
   - git log --since=2.weeks: 显示近2周提交
   - git log -S<function_name>: 添加或删除了某个关键字的提交
   - git log -- <dir path>: 只显示某些文件或者目录的历史提交

** 2.4 撤销操作
*** amend
    - 重新提交
#+BEGIN_SRC 
git commit -m 'initial commit'
git add forgotten_file
git commit --amend
#+END_SRC
    - 补充上的文件填加上到本次提交中，并不改变快照。

** 2.5 远程仓库使用

** Tagging

* Git Branching
** Branches in Nutshell
** Basic Branching and Merging
** Remote Branches
   - git checkout [brachname]
   - create: git branch [branchname]
   - delete: git branch -d [branchname]
   - merge: git merge [targetbranch]
   - list branches: git branch
   - list branches with last commit : git branch -v
   - list branches merged into current branch: git branch --merged 
   - list branches not yet merged into current branch: git branch --nomerged 
** Rebasing
*** The Basic Rebase
    - git checkout experiment
    - git rebase master
    - git checkout master
    - git merge experiment
*** More Interesting Rebases
    - git rebase --onto master server client
    - git checkout master
    - git merge client
    - git rebase master server [set the base of server branch as master]
    - git checkout master
    - git merge server
*** The Perils of Rebasing
    - 


* Distributed Git

** Distributed Workflows

** Contributing to a Project

*** Private Small Team
    - 

*** Private Managed Team

    - Jessica建分支并推送featureA
    - 通知John下拉featureA并继续工作
    - Jessica建分支并提交featureB
    - Jessica收到Josie邮件已推送分支featureBee
    - Jessica下拉并合并featureBee到featureB
    - Jessica将featureB推送到远程featureBee上
    - 管理者合并featureA和featureBee

*** Forked Public Project

*** Public Project over Email

** Maintaining a Project

* 7. Git工具

** 7.14 凭证存储

- Credential，即凭证。用来在本地存储用户名和密码，使得用户使用HTTP协义
  时免于输入用户名和密码。
- Git有一个所谓凭证系统的工具：
  + 默认情况下，需要用户输入用户名和系统，即无缓存模式。
  + “cache” 模式会将凭证存放在内存中一段时间。 密码永远不会被存储在磁
    盘中，并且在15分钟后从内存中清除。缓冲时间还可以人为修改。
#+BEGIN_SRC 
git config --global credential.helper cache
#+END_SRC
  + “store” 模式会将凭证用明文的形式存放在磁盘中，并且永不过期。 这意
    味着除非你修改了你在 Git 服务器上的密码，否则你永远不需要再次输入你
    的凭证信息。 这种方式的缺点是你的密码是用明文的方式存放在你的 home
    目录下。
#+BEGIN_SRC 
git config --global credential.helper store
#+END_SRC

- "cache"模式
  + --timeout <seconds>
    设置后台进程的存活时间。
  + 实际操作
    1. 设置缓冲模式: git config --global credential.helper cache
    2. 正常执行下拉或推送，输入用户名和密码。Git系统将在存活时间内记住该
       凭证信息。
  
- "store"模式

  + --file <path>
    明文文件默认为~/.git-credentials，也可以定义为其它文件。

  + 凭证信息格式
    * 用户名：密码@宿主位置
    * https://bob:s3cre7@mygithost
    * 一般宿主位置为：github.com

  + 实际操作
    1. 建立一个凭证明文文件，如.git-credentials。输入凭证信息：如https://bob.s4cre7@mygithost
    2. 设置凭证模式：git config --global credential.helper store 
